Introdução:
O desafio foi todo desenvolvido em Node.js (adonis.js) usando como linguagem Typescript, em conjunto com banco de dados MySQL, 
usei como ferramenta auxiliar o workbench, e como teste de rotas, usei Postman. 
Como rodar:
Se você fizer um git clone do repositório, pode digitar no console "npm i" para instalar os módulos dependentes para o adequado 
funcionamento do projeto. No arquivo .env faremos a conexão com banco de dados.
Faremos a criação das migrations, para o adonis/lucid criar as tables e colunas no seu bd, com o comando no terminal:
"node ace migrations:run"
Então rodaremos o server com o comando:
"node ace serve --watch"

Rotas:
Rota (/), seria uma rota. get, onde é a page inicial do projeto
Rota (login):
Nesta rota login usamos o método POST, ela é usada para gerar um token que será autenticado na rota dashboard,
 para este token ser gerado na rota login, fizemos a requisação do model User, pegando o login(email) e o password, 
 implentado uma try cacth ,onde o try fara com que seja autorizado atraves de email e password do usuario ,se for autorizado, 
 retornara o token, senao , cacth retornara uma mesagem de credencial invalida.

Rota (dashboard):
Rota usada onde acessamos para autenticação do token gerado na rota login. 
Onde pela estrategia 'api' ele busca a autenticação do usuario e concluindo o login.
Usando o postman para rodar a rota, colocamos o token no header, porem antes do token, colocamos desse modo "Bearer (Token) ", para autentica-lo

Routa.resource:
São as rotas usadas para acessarmos os dados das migrations conectada com o model. Onde o metodo resource aplicado no adonisjs, nos  ajuda a 
"abreviar" a codação, nao precisando especificar se é GET,POST,PUT,UPDATE,DELETE, ele 'encaixa' todos metodos na rota, fazendo a funcionalidade que esta
explicita no model.

Dificuldades:
 - usei provedor oat, nao consguindo implementar totalmente o jwt.
 